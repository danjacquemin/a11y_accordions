{"version":3,"sources":["aria.accordion.js"],"names":["w","doc","undefined","ARIAaccordion","VERSION","LICENSE","widgetTriggerClass","widgetClass","widgetPanelClass","widgetHeading","widgetPanel","idCounter","create","self","panels","headings","triggers","constantPanel","i","defaultPanel","widget","querySelectorAll","length","t","hasAttribute","id","classList","add","getAttribute","thesePanels","setupHeadingButton","addEventListener","keytrolls","setupPanels","panel","panelID","setPanel","constant","ariaHidden","NaN","parseInt","targetState","heading","targetID","newButton","buttonText","getElementById","createElement","textContent","setAttribute","ariaExpanded","isCurrent","appendChild","createTextNode","actions","e","thisTriggers","thisAccordion","this","replace","preventDefault","togglePanel","thisTarget","targetPanel","getID","thisTrigger","ariaDisabled","target","contains","keyCode","which","focus","init","el","state","window","document"],"mappings":"cAAA,SAAAA,EAAAC,EAAAC,GASC,IAAIC,EAAgB,IACpBH,EAAEG,cAAkBA,GADhBA,GAAJ,gBACAH,EAAEG,OAAkBA,eAEpBA,EAAaC,QAAW,QACxBD,EAAaE,QAAW,2EAExBF,IAAAA,EAAcE,YAEdC,EAAoBC,EAApB,YAEAC,EAAsBD,EAAc,UAGpCE,EAAiB,gCACjBC,EAAoB,8BAIpBC,EAAA,EAUCR,EAAAS,OAAA,WACA,IAAAC,EACAC,EAEAC,EACAC,EACAC,EAGAC,EANAC,EAAA,OAMIC,EAASnB,EAAIoB,iBAAiB,yBAQjC,IAHAR,GAAOO,EAGPF,EAAA,EAAAA,EAAAE,EAAAE,OAAAJ,IAAA,CAFA,IAAIK,EA6DJ,IA9DAV,EAAOO,EAAOF,IAWdM,aAAA,QAHCX,EAAKY,GAAK,OAASd,EAAY,IAAMO,GAMtCL,EAAKa,UAAUC,IAAIpB,GAkBlBQ,EANDd,EAAAoB,iBAIK,IAAAR,EAAAY,GAAA,QAAAH,QACJR,EAAAA,EAASb,iBAAIoB,IAAiBR,EAAMA,GAAKY,SAAXf,GAC9BK,EAAWd,iBAAIoB,IAAiBR,EAAMA,GAAKY,SAAXhB,KADhCK,EAASb,EAAIoB,iBAAiB,IAAMR,EAAKY,GAAK,MAAQf,GAC3CT,EAAIoB,iBAAiB,IAAMR,EAAKY,GAAK,MAAQhB,IAYzDI,EAAAW,aAAA,kBAHCL,EAAeN,EAAKe,aAAa,iBAQlCX,EAAgBJ,EAAKW,aAAa,iBAMrBX,EAAKW,aAAa,cAO1BX,EAAKW,aAAa,mBAAqB,CAG3C,IAAAK,EAAchB,EAAGgB,iBAAoBN,GAEpC,IAAAA,EAAA,EAAAA,EAAAM,EAAAP,OAAAC,IACDM,EAAAN,GAAAG,UAAAC,IAAAnB,EAAA,gBAoBAQ,IAdDb,EAAAA,YAAc2B,EAAAA,GAAdhB,EAAiCC,EAAUE,GAA3Cd,EAAc2B,mBAAmBf,EAAUE,GAI1CD,EADAA,EAAAA,iBAAeK,IAAAA,EAAiBI,GAAA,QAAAH,OAE5BrB,EAAAoB,iBAAA,IAAAR,EAAAY,GAAA,SAAAhB,EAAA,KAAAH,GAILL,EAAAoB,iBAAA,IAAAR,EAAAY,GAAA,MAAAhB,EAAA,KAAAH,GAKCU,EAAAA,EAAQO,EAAIQ,EAAAA,OAAiBR,IAC7BP,EAAAA,GAAQe,iBAAIA,QAAiB5B,EAAWA,SACxCa,EAAAO,GAAAQ,iBAAA,UAAA5B,EAAA6B,aAKH7B,EAAa8B,YAAb,SAAuCR,EAAIX,EAAQK,EAAcF,GAChE,IAAAC,EACAgB,EACAC,EACAC,EACAC,EAEA,IAAAnB,EAAO,EAAPA,EAAcJ,EAASQ,OAAvBJ,IAECiB,EAAOV,EAAK,WAAFP,EAAmB,GAC7BkB,EAAQjB,EACRkB,EAAQpB,GAHRiB,EAAKpB,EAAGA,IAMRwB,aAAWxB,KAAWqB,GAEtBD,EAAMR,EAAN,IAAA,GAAAQ,EAAMR,UAAUC,IAAInB,GASN,SAAb4B,GAAqBG,MAAAC,SAAAJ,KAArBA,GAGA,EACAE,EAAAxB,EAAA,IAAA,GAKKsB,EAAA,GAAAtB,EAAAQ,OACJgB,EAAAA,EAAAA,EAAWxB,OAAQsB,IAAW,GAA9BE,EAAWxB,EAAQsB,EAAW,IAAK,KAYrCC,GAAA,SAAAD,GAAAG,MAAAC,SAAAJ,KA/L8BE,EAgM7BxB,EAAA,IAAA,IAMFX,EAAIsC,mBAAJ,SAAA1B,EAAAE,GACA,IAAAyB,EACAC,EACAF,EAFIG,EAIJC,EACCH,EAEAD,IAAAA,EAAAA,EAAAA,EAAW1B,EAAO+B,OAAAA,IAGlBF,GALAF,EAAc3B,EAASG,IAKN6B,mBAAJtB,GACboB,EAAU5C,EAAGyC,eAAQM,GACrBpB,aAAA,eAFAgB,EAAa3C,EAAI8C,cAAc,UAK/BL,EAAQhB,EAAUC,YAGlBiB,EAAAA,UAAUK,GAEVL,EAAAA,UAAUlB,IA3MUnB,sBAwMpBqC,EAAUK,aAAa,OAAQ,UAC/BL,EAAUK,aAAa,gBAAiBN,GACxCC,EAAUK,aAAa,KAAMN,EAAW,YACxCC,EAAUlB,UAAUC,IAAIrB,GAOH,UAAhBmC,GACJS,EAAaN,GAAW,GACxBO,EAAUP,GAAW,GAYrBO,GACAP,EAEDK,aAAA,gBAAA,UAEAL,EAAUQ,GAAYnD,GACtBkD,EAAAP,GAAA,IAIFzC,EAAAA,YAAAyC,GACCA,EAAAQ,YAAAnD,EAAAoD,eAAAR,KADD1C,EAAcmD,QAAU,SAAWC,GASjC,IAGAC,EALDC,EAGKC,KAAAjC,GAAAkC,QAAA,aAAA,IACJH,EAAYvD,EAAGA,eAAIoB,KAAiBO,aAAM6B,kBAK3CtD,EAFEyD,EAAAA,iBAAF,IAAAH,EAAA,QAAAnC,OAEcuC,EAAAA,iBAAgBJ,IAAAA,EAA2BD,SAAzD/C,EAAA,KAAAH,GALgBL,EAAIoB,iBAAiB,IAAMoC,EAAgB,MAAQhD,EAAgB,KAAOH,GAW1FiD,EAAAK,iBANAzD,EAAc0D,YAAaN,EAAGE,EAAeK,EAAYN,IAI1DrD,EAAc0D,YAAc,SAAWN,EAAGE,EAAeM,EAAa/C,GAYpE,IAAAgD,EACCd,EACAZ,EAAWyB,EAAAA,OAIXzB,GAAA,SAAAA,EAAWyB,aAAa,mBAExBC,EAAAC,EAASnB,aAAeW,iBAEvBN,EAAAc,EAAA,QAViD,SAA9CA,EAAYrC,aAAa,kBAa9BsB,EAASJ,EAAeW,SAGvBnB,EAAOyB,EAAU/C,UAGfgD,EAAKC,EAAW,QAChBC,EAAAA,EAAalD,SAEbsB,EAAAA,eAAeQ,GAAekB,aAApB,kBACVE,EAAAD,EAAA,SAnCLhE,EAAA6C,eAAAW,GAAAjC,aAAA,mBA0BMvB,EAAI6C,eAAeW,GAAejC,aAAa,eAiBpD,IAAO2C,EAAAA,EAAOzC,EAAAA,EAAU0C,OAAS9D,IAC5B+D,IAAYA,EAAaC,KAG7BnB,EAAAnC,EAAAE,GAAA,SAhBG8C,EAAQhD,EAASE,GAAGU,aAAa,iBAiBpCsC,EAAWlD,EAAXE,GAAA,SACAgC,EAAalC,EAAbE,GAAA,SAEAoB,EAAImB,EAAAA,eAAwBE,GAAQ,UATtCxD,EAAc6B,UAAY,SAAWuB,GAoBnC,GAAAA,EAAAY,OAASE,UAATD,SAAA9D,GAAA,CACC,IAQAkD,EARAa,EAAAd,EAAAc,SAAAd,EAAAe,MAOAb,EAAAC,KAAAjC,GAAAkC,QAAA,aAAA,IARD,OAaCH,EADAvD,EAAAoB,iBAAA,IAAAoC,EAAA,QAAAnC,OACArB,EAAAoB,iBAAA,IAAAoC,EAAA,SAAAhD,EAAA,KAAAH,GAGAL,EAAAoB,iBAAA,IAAAoC,EAAA,MAAAhD,EAAA,KAAAH,GAhBQ+D,GAwBR,KAlBA,GAmBCd,EAAEK,iBACFJ,EAAaA,EAAalC,OAAS,GAAGiD,QAoB1CpE,MAAA,KAzCG,GA8CHoD,EAAAK,iBApBIJ,EAAa,GAAGe,WAkCnBpE,EAFDqE,KAAA,WAhBCrE,EAAcS,UAQf,IAAI0B,EAAa,SAAWmC,EAAIC,GAC/BD,EAAGxB,aAAa,cAAeyB,IAG5BxB,EAAe,SAAWuB,EAAIC,GACjCD,EAAGxB,aAAa,gBAAiByB,IAG9BR,EAAe,SAAWO,EAAIC,GACjCD,EAAGxB,aAAa,gBAAiByB,IAG9BvB,EAAY,SAAWsB,EAAIC,GAC9BD,EAAGxB,aAAa,eAAgByB,IAIjCvE,EAAcqE,OAtZf,CAwZIG,OAAQC","file":"aria.accordion.min.js","sourcesContent":["/* eslint-disable */\n\n;(function ( w, doc, undefined ) {\n\t'use strict';\n\n\t/**\n\t * Local object for method references\n\t * and define script meta-data\n\t */\n\tvar ARIAaccordion = {};\n\tw.ARIAaccordion   = ARIAaccordion;\n\n\tARIAaccordion.NS      = 'ARIAaccordion';\n\tARIAaccordion.AUTHOR  = 'Scott O\\'Hara';\n\tARIAaccordion.VERSION = '3.2.1';\n\tARIAaccordion.LICENSE = 'https://github.com/scottaohara/accessible_accordions/blob/master/LICENSE';\n\n\tvar widgetClass   = 'accordion';\n\tvar widgetTriggerClass = widgetClass + '__trigger';\n\tvar widgetHeadingClass = widgetClass + '__heading';\n\tvar widgetPanelClass = widgetClass + '__panel';\n\n\tvar widgetHeading = '[data-aria-accordion-heading]';\n\tvar widgetPanel   = '[data-aria-accordion-panel]'\n\n\tvar idCounter = 0;\n\n\t/**\n\t * Global Create\n\t *\n\t * This function validates that the minimum required markup\n\t * is present to create the ARIA widget(s).\n\t * Any additional markup elements or attributes that\n\t * do not exist in the found required markup patterns\n\t * will be generated via this function.\n\t */\n\tARIAaccordion.create = function () {\n\t\tvar self;\n\t\tvar panels;\n\t\tvar defaultPanel = 'none';\n\t\tvar headings;\n\t\tvar triggers;\n\t\tvar constantPanel;\n\t\tvar multiPanel;\n\t\tvar i;\n\n\t\tvar widget = doc.querySelectorAll('[data-aria-accordion]');\n\n\t\tidCounter += 1;\n\n\t\tfor ( i = 0; i < widget.length; i++ ) {\n\t\t\tself = widget[i];\n\t\t\tvar t;\n\n\t\t\t/**\n\t\t\t * Check for IDs and create arrays of necessary\n\t\t\t * panels & headings for further setup functions.\n\t\t\t */\n\t\t\tif ( !self.hasAttribute('id') ) {\n\t\t\t\tself.id = 'acc_' + idCounter + '-' + i;\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * Setup accordion classes\n\t\t\t */\n\t\t\tself.classList.add(widgetClass);\n\n\n\t\t\t/**\n\t\t\t * Get all panels & headings of an accordion pattern based\n\t\t\t * on a specific ID > direct child selector (this will ensure\n\t\t\t * that nested accordions don't get properties meant for\n\t\t\t * the parent accordion, or vice-versa).\n\t\t\t *\n\t\t\t * If accordions are contained within an ol/ul, the selector\n\t\t\t * needs to be different.\n\t\t\t */\n\t\t\tif ( doc.querySelectorAll('#' + self.id + '> li').length ) {\n\t\t\t\tpanels = doc.querySelectorAll('#' + self.id + ' li > ' + widgetPanel);\n\t\t\t\theadings = doc.querySelectorAll('#' + self.id + ' li > ' + widgetHeading);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tpanels = doc.querySelectorAll('#' + self.id + ' > ' + widgetPanel);\n\t\t\t\theadings = doc.querySelectorAll('#' + self.id + ' > ' + widgetHeading);\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * Check for options:\n\t\t\t * data-default - is there a default opened panel?\n\t\t\t * data-constant - should the accordion always have A panel open?\n\t\t\t */\n\t\t\tif ( self.hasAttribute('data-default') ) {\n\t\t\t\tdefaultPanel = self.getAttribute('data-default');\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * Accordions with a constantly open panel are not a default\n\t\t\t * but if a data-constant attribute is used, then we need this\n\t\t\t * to be true.\n\t\t\t */\n\t\t\tconstantPanel = self.hasAttribute('data-constant');\n\n\t\t\t/**\n\t\t\t * Accordions can have multiple panels open at a time,\n\t\t\t * if they have a data-multi attribute.\n\t\t\t */\n\t\t\tmultiPanel = self.hasAttribute('data-multi');\n\n\t\t\t/**\n\t\t\t * If accordion panels are meant to transition, apply this inline style.\n\t\t\t * This is to help mitigate a quick flash of CSS being applied to the\n\t\t\t * no-js styling, and having an unwanted transition on initial page load.\n\t\t\t */\n\t\t\tif ( self.hasAttribute('data-transition') ) {\n\t\t\t\tvar thesePanels = self.querySelectorAll(widgetPanel);\n\n\t\t\t\tfor ( t = 0; t < thesePanels.length; t++ ) {\n\t\t\t\t\tthesePanels[t].classList.add(widgetPanelClass + '--transition');\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * Setup Panels, Headings & Buttons\n\t\t\t */\n\t\t\tARIAaccordion.setupPanels(self.id, panels, defaultPanel, constantPanel);\n\t\t\tARIAaccordion.setupHeadingButton(headings, constantPanel);\n\n\t\t\tif ( doc.querySelectorAll('#' + self.id + '> li').length ) {\n\t\t\t\ttriggers = doc.querySelectorAll('#' + self.id + ' li > ' + widgetHeading + ' .' + widgetTriggerClass);\n\t\t\t}\n\t\t\telse {\n\t\t\t\ttriggers = doc.querySelectorAll('#' + self.id + ' > ' + widgetHeading + ' .' + widgetTriggerClass);\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * Now that the headings/triggers and panels are setup\n\t\t\t * we can grab all the triggers and setup their functionality.\n\t\t\t */\n\t\t\tfor ( t = 0; t < triggers.length; t++ ) {\n\t\t\t\ttriggers[t].addEventListener('click', ARIAaccordion.actions);\n\t\t\t\ttriggers[t].addEventListener('keydown', ARIAaccordion.keytrolls);\n\t\t\t}\n\t\t} // for(widget.length)\n\t}; // ARIAaccordion.create()\n\n\n\tARIAaccordion.setupPanels = function ( id, panels, defaultPanel, constantPanel ) {\n\t\tvar i;\n\t\tvar panel;\n\t\tvar panelID;\n\t\tvar setPanel;\n\t\tvar constant;\n\n\t\tfor ( i = 0; i < panels.length; i++ ) {\n\t\t\tpanel = panels[i];\n\t\t\tpanelID = id + '_panel_' + (i + 1);\n\t\t\tsetPanel = defaultPanel;\n\t\t\tconstant = constantPanel;\n\n\t\t\tpanel.setAttribute('id', panelID);\n\t\t\tariaHidden(panels[0], true);\n\n\t\t\tpanel.classList.add(widgetPanelClass);\n\n\t\t\t/**\n\t\t\t * Set the accordion to have the appropriately\n\t\t\t * opened panel if a data-default value is set.\n\t\t\t * If no value set, then no panels are open.\n\t\t\t */\n\t\t\tif ( setPanel !== 'none' && parseInt(setPanel) !== NaN ) {\n\t\t\t\t// if value is 1 or less\n\t\t\t\tif ( setPanel <= 1 ) {\n\t\t\t\t\tariaHidden(panels[0], false);\n\t\t\t\t}\n\t\t\t\t// if value is more than the number of panels, then open\n\t\t\t\t// the last panel by default\n\t\t\t\telse if ( (setPanel - 1) >= panels.length ) {\n\t\t\t\t\tariaHidden(panels[panels.length - 1], false);\n\t\t\t\t}\n\t\t\t\t// for any other value between 2 - the last panel #, open that one\n\t\t\t\telse {\n\t\t\t\t\tariaHidden(panels[(setPanel - 1)], false);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * If an accordion is meant to have a consistently open panel,\n\t\t\t * and a default open panel was not set (or was not set correctly),\n\t\t\t * then run one more check.\n\t\t\t */\n\t\t\tif ( constant && setPanel === 'none' || parseInt(setPanel) === NaN ) {\n\t\t\t\tariaHidden(panels[0], false);\n\t\t\t}\n\t\t}\n\t}; // ARIAaccordion.setupPanels\n\n\n\tARIAaccordion.setupHeadingButton = function ( headings, constantPanel ) {\n\t\tvar heading;\n\t\tvar targetID;\n\t\tvar targetState;\n\t\tvar newButton;\n\t\tvar buttonText;\n\t\tvar i;\n\n\t\tfor ( i = 0; i < headings.length; i++ ) {\n\t\t\theading     = headings[i];\n\t\t\ttargetID    = heading.nextElementSibling.id;\n\t\t\ttargetState = doc.getElementById(targetID).getAttribute('aria-hidden');\n\n\t\t\t// setup new heading buttons\n\t\t\tnewButton  = doc.createElement('button');\n\t\t\tbuttonText = heading.textContent;\n\t\t\t// clear out the heading's content\n\t\t\theading.innerHTML = '';\n\t\t\t// provide the heading with a class for styling\n\t\t\theading.classList.add(widgetHeadingClass);\n\n\t\t\tnewButton.setAttribute('type', 'button');\n\t\t\tnewButton.setAttribute('aria-controls', targetID);\n\t\t\tnewButton.setAttribute('id', targetID + '_trigger');\n\t\t\tnewButton.classList.add(widgetTriggerClass);\n\n\t\t\t/**\n\t\t\t * Check the corresponding panel to see if it was set up\n\t\t\t * to be hidden or shown by default. Add an aria-expanded\n\t\t\t * attribute value that is appropriate.\n\t\t\t */\n\t\t\tif ( targetState === 'false' ) {\n\t\t\t\tariaExpanded(newButton, true);\n\t\t\t\tisCurrent(newButton, true);\n\n\t\t\t\t/**\n\t\t\t\t * Check to see if this an accordion that needs a constantly\n\t\t\t\t * opened panel, and if the button's target is not hidden.\n\t\t\t\t */\n\t\t\t\tif ( constantPanel ) {\n\t\t\t\t\tnewButton.setAttribute('aria-disabled', 'true');\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tariaExpanded(newButton, false);\n\t\t\t\tisCurrent(newButton, false);\n\t\t\t}\n\n\t\t\t// Add the Button & previous heading text\n\t\t\theading.appendChild(newButton);\n\t\t\tnewButton.appendChild(doc.createTextNode(buttonText));\n\t\t}\n\t}; // ARIAaccordion.createButton\n\n\n\tARIAaccordion.actions = function ( e ) {\n\t\t// Need to pass in if this is a multi accordion or not.\n\t\t// Also need to pass in existing trigger arrays.\n\t\tvar thisAccordion = this.id.replace(/_panel.*$/g, '');\n\t\tvar thisTarget = doc.getElementById(this.getAttribute('aria-controls'));\n\t\tvar thisTriggers;\n\n\t\tif ( doc.querySelectorAll('#' + thisAccordion + '> li').length ) {\n\t\t\tthisTriggers = doc.querySelectorAll('#' + thisAccordion + ' li > ' + widgetHeading + ' .' + widgetTriggerClass);\n\t\t}\n\t\telse {\n\t\t\tthisTriggers = doc.querySelectorAll('#' + thisAccordion + ' > ' + widgetHeading + ' .' + widgetTriggerClass);\n\t\t}\n\n\t\te.preventDefault();\n\n\t\tARIAaccordion.togglePanel( e, thisAccordion, thisTarget, thisTriggers );\n\t}; // ARIAaccordion.actions()\n\n\n\tARIAaccordion.togglePanel = function ( e, thisAccordion, targetPanel, triggers ) {\n\t\tvar getID;\n\t\tvar i;\n\t\tvar thisTrigger = e.target;\n\n\t\t// check to see if a trigger is disabled\n\t\tif ( thisTrigger.getAttribute('aria-disabled') !== 'true' ) {\n\n\t\t\tgetID = thisTrigger.getAttribute('aria-controls');\n\n\t\t\tisCurrent(thisTrigger, 'true');\n\n\t\t\tif ( thisTrigger.getAttribute('aria-expanded') === 'true' ) {\n\t\t\t\tariaExpanded(thisTrigger, 'false');\n\t\t\t\tariaHidden(targetPanel, 'true');\n\t\t\t}\n\t\t\telse {\n\t\t\t\tariaExpanded(thisTrigger, 'true');\n\t\t\t\tariaHidden(targetPanel, 'false');\n\n\t\t\t\tif ( doc.getElementById(thisAccordion).hasAttribute('data-constant') ) {\n\t\t\t\t\tariaDisabled(thisTrigger, 'true');\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ( doc.getElementById(thisAccordion).hasAttribute('data-constant') ||\n\t\t\t\t\t !doc.getElementById(thisAccordion).hasAttribute('data-multi') ) {\n\n\t\t\t\tfor ( i = 0; i < triggers.length; i++ ) {\n\t\t\t\t\tif ( thisTrigger !== triggers[i] ) {\n\t\t\t\t\t\tisCurrent(triggers[i], 'false');\n\t\t\t\t\t\tgetID = triggers[i].getAttribute('aria-controls');\n\t\t\t\t\t\tariaDisabled(triggers[i], 'false');\n\t\t\t\t\t\tariaExpanded(triggers[i], 'false');\n\t\t\t\t\t\tariaHidden(doc.getElementById(getID), 'true');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n\n\n\tARIAaccordion.keytrolls = function ( e ) {\n\t\tif ( e.target.classList.contains(widgetTriggerClass) ) {\n\t\t\tvar keyCode = e.keyCode || e.which;\n\n\t\t\t// var keyUp = 38;\n\t\t\t// var keyDown = 40;\n\t\t\tvar keyHome = 36;\n\t\t\tvar keyEnd = 35;\n\n\t\t\tvar thisAccordion = this.id.replace(/_panel.*$/g, '');\n\t\t\tvar thisTriggers;\n\n\t\t\tif ( doc.querySelectorAll('#' + thisAccordion + '> li').length ) {\n\t\t\t\tthisTriggers = doc.querySelectorAll('#' + thisAccordion + ' li > ' + widgetHeading + ' .' + widgetTriggerClass);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthisTriggers = doc.querySelectorAll('#' + thisAccordion + ' > ' + widgetHeading + ' .' + widgetTriggerClass);\n\t\t\t}\n\n\n\t\t\tswitch ( keyCode ) {\n\t\t\t\t/**\n\t\t\t\t * keyUp & keyDown are optional controls\n\t\t\t\t * for accordion components.\n\t\t\t\t */\n\t\t\t\t// case keyUp:\n\t\t\t\t// \tif ( doc.getElementById(thisAccordion).hasAttribute('data-up-down') ) {\n\t\t\t\t// \t\te.preventDefault();\n\t\t\t\t// \t\t// optional up arrow controls\n\t\t\t\t// \t}\n\t\t\t\t// \tbreak;\n\n\t\t\t\t// case keyDown:\n\t\t\t\t// \tif ( doc.getElementById(thisAccordion).hasAttribute('data-up-down') ) {\n\t\t\t\t// \t\te.preventDefault();\n\t\t\t\t// \t\t// optional down arrow control\n\t\t\t\t// \t}\n\t\t\t\t// \tbreak;\n\n\t\t\t\t/**\n\t\t\t\t * keyEnd/Home are optional functions that may not be inherently known\n\t\t\t\t * to most users and, in the case of END, conflict with expected\n\t\t\t\t * usage of that key with NVDA.\n\t\t\t\t */\n\t\t\t\tcase keyEnd:\n\t\t\t\t\te.preventDefault();\n\t\t\t\t\tthisTriggers[thisTriggers.length - 1].focus();\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase keyHome:\n\t\t\t\t\te.preventDefault();\n\t\t\t\t\tthisTriggers[0].focus();\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}; // ARIAaccordion.keytrolls()\n\n\n\t/**\n\t * Initialize Accordion Functions\n\t * if expanding this script, place any other\n\t * initialize functions within here.\n\t */\n\tARIAaccordion.init = function () {\n\t\tARIAaccordion.create();\n\t};\n\n\n\t/**\n\t * Helper Functions\n\t * Just to cut down on the verboseness of some declarations\n\t */\n\tvar ariaHidden = function ( el, state ) {\n\t\tel.setAttribute('aria-hidden', state);\n\t};\n\n\tvar ariaExpanded = function ( el, state ) {\n\t\tel.setAttribute('aria-expanded', state);\n\t};\n\n\tvar ariaDisabled = function ( el, state ) {\n\t\tel.setAttribute('aria-disabled', state);\n\t};\n\n\tvar isCurrent = function ( el, state ) {\n\t\tel.setAttribute('data-current', state);\n\t};\n\n\t// go go JavaScript\n\tARIAaccordion.init();\n\n})( window, document );"]}